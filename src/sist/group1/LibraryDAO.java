package sist.group1;

import java.util.*;
import java.io.*;

public class LibraryDAO {

	/*
	
	this.users.add(new User("","","","","")); 전체 사용자 정보 저장용 리스트에 넣는 방법
	this.books.add(new Book("","","","")); 전체 책 정보 저장용 리스트에 넣는 방법
	this.checkOuts.add(new CheckOut("B001","U001","2017-12-27")); 대출 전체 정보 리스트에 넣는 방법
	for(CheckOut c : checkOuts) { 리스트에서 특정 매개변수 값에 맞게 객체 정보 꺼내오는 방법
		if(c.getcBookNo().equals("B001")) {
		
		}
	 Set<String>key = TestClass.testBook.keySet();
	 Iterator it = key.iterator();
	 while(it.hasNext()){ 맵에서 특정 매개변수 값에 맞게 객체 정보 꺼내오는 방법
	 	String key = (String)it.next();
	 	Book b = TestClass.testBook.get(key);
	 }
		
	}*/
	
	/*
	 @Param
	 사용자 정보(현재 접속한 사용자 아이디, 책 정보), 사용자 전체 정보, 책 전체 정보, 대출 전체 정보 
	 */
	
	private Utils utils = Utils.getInstance();
	private Map<String, User> users = new HashMap<String, User>();
	private Map<String, Book> books = new HashMap<String, Book>();
	private List<CheckOut>checkOuts = new ArrayList<CheckOut>();
	
	
	
	private static final String USER_FILE = "users.data";
	private static final String BOOK_FILE = "books.data";
	private static final String CHECKOUT_FILE = "checkOuts.data";

	public LibraryDAO() {
		File file = new File(USER_FILE);
		File file1 = new File(BOOK_FILE);
		File file2 = new File(CHECKOUT_FILE);
		Object obj = null;
		
		if (file.exists()) {
			obj = deSerialization(USER_FILE);
			this.users = (Map<String, User>)obj;
			obj = null;
		}
		if(file1.exists()) {
			obj = deSerialization(BOOK_FILE);
			this.books = (Map<String, Book>)obj;
			obj = null;
		}
		if(file2.exists()) {
			obj = deSerialization(CHECKOUT_FILE);
			this.checkOuts = (List<CheckOut>)obj;
		}
	}
	
	
	/*
	-회원가입이 완료 되었습니다.
	-이미 존재하는 id 입니다. 다시 입력해주세요.
	-잘못된 비밀번호 형식입니다. 다시 입력해주세요.
	-잘못된 전화번호 형식입니다. 다시 입력해주세요.*/
	
	public void register(String userId, String password, String name, String phoneNumber) {
		
		User user = null;
		String userNo = "U001";
		
		Set<String>key = this.users.keySet();
		List<String>temp = new ArrayList<String>(key);
				
		if(this.users.size()>0){
			user = this.users.get("");
			userNo = String.format("U%03d", Integer.parseInt(user.getUserNo().substring(1)) + 1); 
		}
		
		User u = new User(userNo, userId, password, name, phoneNumber);
		this.users.put(userNo, u);
	}
	
	/*
	 @param
	 아이디, 비밀번호 입력 값
	 사용자 로그인용 메소드, 현재 사용자의 고유 번호 저장
	 */
	public void login(String userId, String password) {
		
	}
	
	/*
	 사용자 아이디 이미 존재 여부 확인 예외처리
	 */
	public void isExistUser(String userId) throws ExistUserException{
		
	}
	
	/*
	 @Param 
	 파일이름
	 역직렬화
	 */
	public Object deSerialization(String fileName) {
		Object result = null;
		FileInputStream fs = null;
		ObjectInputStream os = null;
		try {
			fs = new FileInputStream(fileName);
			os = new ObjectInputStream(fs);
			result = os.readObject();			
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
		} finally {
			try {
				os.close();
				fs.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return result;
	}
	
	//프로그램 종료시 users, books, checkOuts 데이터 저장
	public ObjectOutputStream fileSave() {
		FileOutputStream fs = null;
		ObjectOutputStream os = null;
		try {
			fs = new FileOutputStream(USER_FILE);
			os = new ObjectOutputStream(fs);
			os.writeObject(this.users);
			fs = new FileOutputStream(BOOK_FILE);
			os = new ObjectOutputStream(fs);
			os.writeObject(this.books);
			fs = new FileOutputStream(CHECKOUT_FILE);
			os = new ObjectOutputStream(fs);
			os.writeObject(this.checkOuts);
			//컬렉션 저장소에 저장된 모든 정보를 직렬화 시도
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				os.close();
				fs.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return os;
	}
}
